   1               		.file	"blinky.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.startup.main,"ax",@progbits
  12               	.global	main
  14               	main:
  15               	.LFB7:
  16               		.file 1 "blinky.c"
   1:blinky.c      **** #include <avr/io.h>
   2:blinky.c      **** #include <avr/pgmspace.h>
   3:blinky.c      **** #include <util/delay.h>
   4:blinky.c      **** #include "usb_debug_only.h"
   5:blinky.c      **** #include "print.h"
   6:blinky.c      **** 
   7:blinky.c      **** 
   8:blinky.c      **** // Teensy 2.0: LED is active high
   9:blinky.c      **** #if defined(__AVR_ATmega32U4__) || defined(__AVR_AT90USB1286__)
  10:blinky.c      **** #define LED_ON1		(PORTB |= (1<<4))
  11:blinky.c      **** #define LED_OFF1		(PORTB &= ~(1<<4))
  12:blinky.c      **** #define LED_ON2		(PORTB |= (1<<5))
  13:blinky.c      **** #define LED_OFF2		(PORTB &= ~(1<<5))
  14:blinky.c      **** #define LED_ON3		(PORTB |= (1<<6))
  15:blinky.c      **** #define LED_OFF3		(PORTB &= ~(1<<6))
  16:blinky.c      **** 
  17:blinky.c      **** // Teensy 1.0: LED is active low
  18:blinky.c      **** #else
  19:blinky.c      **** #define LED_ON	(PORTD &= ~(1<<6))
  20:blinky.c      **** #define LED_OFF	(PORTD |= (1<<6))
  21:blinky.c      **** #endif
  22:blinky.c      **** 
  23:blinky.c      **** #define LED_CONFIG1	(DDRB |= (1<<4))
  24:blinky.c      **** #define LED_CONFIG2	(DDRB |= (1<<5))
  25:blinky.c      **** #define LED_CONFIG3	(DDRB |= (1<<6))
  26:blinky.c      **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  27:blinky.c      **** #define DIT 80		/* unit time for morse code */
  28:blinky.c      **** 
  29:blinky.c      **** 
  30:blinky.c      **** int main(void)
  31:blinky.c      **** {
  17               		.loc 1 31 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  32:blinky.c      ****     // set for 16 MHz clock, and make sure the LED is off
  33:blinky.c      ****     CPU_PRESCALE(0);
  23               		.loc 1 33 0
  24 0000 80E8      		ldi r24,lo8(-128)
  25 0002 8093 6100 		sts 97,r24
  26 0006 1092 6100 		sts 97,__zero_reg__
  34:blinky.c      ****     LED_CONFIG1;
  27               		.loc 1 34 0
  28 000a 249A      		sbi 0x4,4
  35:blinky.c      ****     LED_CONFIG2;
  29               		.loc 1 35 0
  30 000c 259A      		sbi 0x4,5
  36:blinky.c      ****     LED_CONFIG3;
  31               		.loc 1 36 0
  32 000e 269A      		sbi 0x4,6
  37:blinky.c      ****     LED_OFF1;
  33               		.loc 1 37 0
  34 0010 2C98      		cbi 0x5,4
  38:blinky.c      ****     LED_OFF2;
  35               		.loc 1 38 0
  36 0012 2D98      		cbi 0x5,5
  39:blinky.c      ****     LED_OFF3;
  37               		.loc 1 39 0
  38 0014 2E98      		cbi 0x5,6
  40:blinky.c      **** 
  41:blinky.c      ****     // initialize the USB, but don't want for the host to
  42:blinky.c      ****     // configure.  The first several messages sent will be
  43:blinky.c      ****     // lost because the PC hasn't configured the USB yet,
  44:blinky.c      ****     // but we care more about blinking than debug messages!
  45:blinky.c      ****     usb_init();
  39               		.loc 1 45 0
  40 0016 0E94 0000 		call usb_init
  41               	.LVL0:
  42               	.L2:
  46:blinky.c      **** 
  47:blinky.c      ****     // blink morse code messages!
  48:blinky.c      ****     while (1) {
  49:blinky.c      ****         LED_ON1;
  43               		.loc 1 49 0 discriminator 1
  44 001a 2C9A      		sbi 0x5,4
  45               	.LVL1:
  46               	.LBB8:
  47               	.LBB9:
  48               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  49               		.loc 2 164 0 discriminator 1
  50 001c 2FEF      		ldi r18,lo8(4799999)
  51 001e 8DE3      		ldi r24,hi8(4799999)
  52 0020 99E4      		ldi r25,hlo8(4799999)
  53 0022 2150      		1: subi r18,1
  54 0024 8040      		sbci r24,0
  55 0026 9040      		sbci r25,0
  56 0028 01F4      		brne 1b
  57 002a 00C0      		rjmp .
  58 002c 0000      		nop
  59               	.LBE9:
  60               	.LBE8:
  50:blinky.c      ****         _delay_ms(1500);
  51:blinky.c      ****         LED_OFF1;
  61               		.loc 1 51 0 discriminator 1
  62 002e 2C98      		cbi 0x5,4
  52:blinky.c      ****         LED_ON2;
  63               		.loc 1 52 0 discriminator 1
  64 0030 2D9A      		sbi 0x5,5
  65               	.LVL2:
  66               	.LBB10:
  67               	.LBB11:
  68               		.loc 2 164 0 discriminator 1
  69 0032 2FEF      		ldi r18,lo8(4799999)
  70 0034 8DE3      		ldi r24,hi8(4799999)
  71 0036 99E4      		ldi r25,hlo8(4799999)
  72 0038 2150      		1: subi r18,1
  73 003a 8040      		sbci r24,0
  74 003c 9040      		sbci r25,0
  75 003e 01F4      		brne 1b
  76 0040 00C0      		rjmp .
  77 0042 0000      		nop
  78               	.LBE11:
  79               	.LBE10:
  53:blinky.c      ****         _delay_ms(1500);
  54:blinky.c      ****         LED_OFF2;
  80               		.loc 1 54 0 discriminator 1
  81 0044 2D98      		cbi 0x5,5
  55:blinky.c      ****         LED_ON3;
  82               		.loc 1 55 0 discriminator 1
  83 0046 2E9A      		sbi 0x5,6
  84               	.LVL3:
  85               	.LBB12:
  86               	.LBB13:
  87               		.loc 2 164 0 discriminator 1
  88 0048 2FEF      		ldi r18,lo8(4799999)
  89 004a 8DE3      		ldi r24,hi8(4799999)
  90 004c 99E4      		ldi r25,hlo8(4799999)
  91 004e 2150      		1: subi r18,1
  92 0050 8040      		sbci r24,0
  93 0052 9040      		sbci r25,0
  94 0054 01F4      		brne 1b
  95 0056 00C0      		rjmp .
  96 0058 0000      		nop
  97               	.LBE13:
  98               	.LBE12:
  56:blinky.c      ****         _delay_ms(1500);
  57:blinky.c      ****         LED_OFF3;
  99               		.loc 1 57 0 discriminator 1
 100 005a 2E98      		cbi 0x5,6
 101 005c 00C0      		rjmp .L2
 102               		.cfi_endproc
 103               	.LFE7:
 105               		.text
 106               	.Letext0:
 107               		.file 3 "/usr/lib/avr/include/stdint.h"
 108               		.file 4 "usb_debug_only.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 blinky.c
     /tmp/ccrg2CZk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccrg2CZk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccrg2CZk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccrg2CZk.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccrg2CZk.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccrg2CZk.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccrg2CZk.s:14     .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
usb_init
