
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000059e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009d9  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003b0  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000039c  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b8  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000037f  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000940  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
   6:	00 00       	nop
	char c;

	while (1) {
		c = pgm_read_byte(s++);
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
   a:	00 00       	nop
		if (!c) break;
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
   e:	00 00       	nop
		if (c == '\n') usb_debug_putchar('\r');
  10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
  12:	00 00       	nop
  14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
  16:	00 00       	nop
  18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
		usb_debug_putchar(c);
  1a:	00 00       	nop
  1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
	}
  22:	00 00       	nop
}
  24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
  26:	00 00       	nop
  28:	f0 c0       	rjmp	.+480    	; 0x20a <__vector_10>
  2a:	00 00       	nop
  2c:	2d c1       	rjmp	.+602    	; 0x288 <__vector_11>
  2e:	00 00       	nop
  30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
  36:	00 00       	nop
  38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
  46:	00 00       	nop
  48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
  52:	00 00       	nop
  54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
  56:	00 00       	nop
  58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
  66:	00 00       	nop
  68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
  6e:	00 00       	nop
  70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
  7e:	00 00       	nop
  80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
  82:	00 00       	nop
  84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
  86:	00 00       	nop
  88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
  8e:	00 00       	nop
  90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
  92:	00 00       	nop
  94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
  96:	00 00       	nop

00000098 <descriptor_list>:
  98:	00 01 00 00 3c 01 12 00 02 00 00 05 01 22 00 22     ....<........"."
  a8:	00 00 27 01 15 00 21 00 00 17 01 09 00 03 00 00     ..'...!.........
  b8:	01 01 04 01 03 09 04 eb 00 14 02 03 09 04 c9 00     ................
  c8:	20                                                   

000000c9 <string2>:
  c9:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
  d9:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
  e9:	00 00                                               ..

000000eb <string1>:
  eb:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
  fb:	6d 00 65 00 00 00                                   m.e...

00000101 <string0>:
 101:	04 03 09 04                                         ....

00000105 <config1_descriptor>:
 105:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 115:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 125:	00 01                                               ..

00000127 <hid_report_descriptor>:
 127:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 137:	09 75 81 02 c0                                      .u...

0000013c <device_descriptor>:
 13c:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 14c:	00 01                                               ..

0000014e <endpoint_config_table>:
 14e:	00 00 01 c1 26 00                                   ....&.

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d0 e2       	ldi	r29, 0x20	; 32
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_clear_bss>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	a3 30       	cpi	r26, 0x03	; 3
 16c:	b1 07       	cpc	r27, r17
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	02 d0       	rcall	.+4      	; 0x176 <main>
 172:	c9 c1       	rjmp	.+914    	; 0x506 <_exit>

00000174 <__bad_interrupt>:
 174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <main>:


int main(void)
{
    // set for 16 MHz clock, and make sure the LED is off
    CPU_PRESCALE(0);
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	80 93 61 00 	sts	0x0061, r24
 17c:	10 92 61 00 	sts	0x0061, r1
    LED_CONFIG1;
 180:	24 9a       	sbi	0x04, 4	; 4
    LED_CONFIG2;
 182:	25 9a       	sbi	0x04, 5	; 4
    LED_CONFIG3;
 184:	26 9a       	sbi	0x04, 6	; 4
    LED_OFF1;
 186:	2c 98       	cbi	0x05, 4	; 5
    LED_OFF2;
 188:	2d 98       	cbi	0x05, 5	; 5
    LED_OFF3;
 18a:	2e 98       	cbi	0x05, 6	; 5

    // initialize the USB, but don't want for the host to
    // configure.  The first several messages sent will be
    // lost because the PC hasn't configured the USB yet,
    // but we care more about blinking than debug messages!
    usb_init();
 18c:	27 d0       	rcall	.+78     	; 0x1dc <usb_init>
 18e:	2c 9a       	sbi	0x05, 4	; 5

    // blink morse code messages!
    while (1) {
        LED_ON1;
 190:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8d e3       	ldi	r24, 0x3D	; 61
 194:	99 e4       	ldi	r25, 0x49	; 73
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x20>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x2a>
 1a0:	00 00       	nop
 1a2:	2c 98       	cbi	0x05, 4	; 5
        _delay_ms(1500);
        LED_OFF1;
 1a4:	2d 9a       	sbi	0x05, 5	; 5
        LED_ON2;
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	8d e3       	ldi	r24, 0x3D	; 61
 1aa:	99 e4       	ldi	r25, 0x49	; 73
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x36>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x40>
 1b6:	00 00       	nop
 1b8:	2d 98       	cbi	0x05, 5	; 5
        _delay_ms(1500);
        LED_OFF2;
 1ba:	2e 9a       	sbi	0x05, 6	; 5
        LED_ON3;
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	8d e3       	ldi	r24, 0x3D	; 61
 1c0:	99 e4       	ldi	r25, 0x49	; 73
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x4c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x56>
 1cc:	00 00       	nop
 1ce:	2e 98       	cbi	0x05, 6	; 5
        _delay_ms(1500);
        LED_OFF3;
 1d0:	de cf       	rjmp	.-68     	; 0x18e <main+0x18>

000001d2 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 1d2:	80 91 e8 00 	lds	r24, 0x00E8
 1d6:	80 ff       	sbrs	r24, 0
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <usb_wait_in_ready>
}
 1da:	08 95       	ret

000001dc <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 1dc:	81 e8       	ldi	r24, 0x81	; 129
 1de:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 1e2:	80 ea       	ldi	r24, 0xA0	; 160
 1e4:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 1e8:	86 e1       	ldi	r24, 0x16	; 22
 1ea:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 1ec:	09 b4       	in	r0, 0x29	; 41
 1ee:	00 fe       	sbrs	r0, 0
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 1f2:	80 e9       	ldi	r24, 0x90	; 144
 1f4:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 1f8:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 1fc:	10 92 02 01 	sts	0x0102, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 218:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 21c:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 220:	83 ff       	sbrs	r24, 3
 222:	0f c0       	rjmp	.+30     	; 0x242 <__vector_10+0x38>
		UENUM = 0;
 224:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 22e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 232:	92 e2       	ldi	r25, 0x22	; 34
 234:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 238:	98 e0       	ldi	r25, 0x08	; 8
 23a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 23e:	10 92 02 01 	sts	0x0102, r1
        }
	if (intbits & (1<<SOFI)) {
 242:	82 ff       	sbrs	r24, 2
 244:	1a c0       	rjmp	.+52     	; 0x27a <__vector_10+0x70>
		if (usb_configuration) {
 246:	80 91 02 01 	lds	r24, 0x0102
 24a:	88 23       	and	r24, r24
 24c:	b1 f0       	breq	.+44     	; 0x27a <__vector_10+0x70>
			t = debug_flush_timer;
 24e:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 252:	88 23       	and	r24, r24
 254:	91 f0       	breq	.+36     	; 0x27a <__vector_10+0x70>
				debug_flush_timer = -- t;
 256:	81 50       	subi	r24, 0x01	; 1
 258:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 25c:	81 11       	cpse	r24, r1
 25e:	0d c0       	rjmp	.+26     	; 0x27a <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 266:	80 91 e8 00 	lds	r24, 0x00E8
 26a:	85 ff       	sbrs	r24, 5
 26c:	03 c0       	rjmp	.+6      	; 0x274 <__vector_10+0x6a>
						UEDATX = 0;
 26e:	10 92 f1 00 	sts	0x00F1, r1
 272:	f9 cf       	rjmp	.-14     	; 0x266 <__vector_10+0x5c>
					}
					UEINTX = 0x3A;
 274:	8a e3       	ldi	r24, 0x3A	; 58
 276:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	0b b6       	in	r0, 0x3b	; 59
 294:	0f 92       	push	r0
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 2c0:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 2c4:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 2c8:	83 ff       	sbrs	r24, 3
 2ca:	00 c1       	rjmp	.+512    	; 0x4cc <__vector_11+0x244>
                bmRequestType = UEDATX;
 2cc:	90 91 f1 00 	lds	r25, 0x00F1
                bRequest = UEDATX;
 2d0:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
 2d4:	00 91 f1 00 	lds	r16, 0x00F1
                wValue |= (UEDATX << 8);
 2d8:	20 91 f1 00 	lds	r18, 0x00F1
 2dc:	10 e0       	ldi	r17, 0x00	; 0
 2de:	12 2b       	or	r17, r18
                wIndex = UEDATX;
 2e0:	30 91 f1 00 	lds	r19, 0x00F1
                wIndex |= (UEDATX << 8);
 2e4:	20 91 f1 00 	lds	r18, 0x00F1
 2e8:	e3 2e       	mov	r14, r19
 2ea:	f1 2c       	mov	r15, r1
 2ec:	f2 2a       	or	r15, r18
                wLength = UEDATX;
 2ee:	20 91 f1 00 	lds	r18, 0x00F1
                wLength |= (UEDATX << 8);
 2f2:	40 91 f1 00 	lds	r20, 0x00F1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	34 2b       	or	r19, r20
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2fa:	42 ef       	ldi	r20, 0xF2	; 242
 2fc:	40 93 e8 00 	sts	0x00E8, r20
                if (bRequest == GET_DESCRIPTOR) {
 300:	86 30       	cpi	r24, 0x06	; 6
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_11+0x7e>
 304:	44 c0       	rjmp	.+136    	; 0x38e <__vector_11+0x106>
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	88 e9       	ldi	r24, 0x98	; 152
 30a:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 30c:	fc 01       	movw	r30, r24
 30e:	45 91       	lpm	r20, Z+
 310:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 312:	40 17       	cp	r20, r16
 314:	51 07       	cpc	r21, r17
 316:	39 f4       	brne	.+14     	; 0x326 <__vector_11+0x9e>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
 318:	fc 01       	movw	r30, r24
 31a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 31c:	45 91       	lpm	r20, Z+
 31e:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 320:	4e 15       	cp	r20, r14
 322:	5f 05       	cpc	r21, r15
 324:	21 f0       	breq	.+8      	; 0x32e <__vector_11+0xa6>
					list += sizeof(struct descriptor_list_struct)-2;
 326:	07 96       	adiw	r24, 0x07	; 7
 328:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 32a:	81 f7       	brne	.-32     	; 0x30c <__vector_11+0x84>
 32c:	cf c0       	rjmp	.+414    	; 0x4cc <__vector_11+0x244>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 32e:	fc 01       	movw	r30, r24
 330:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 332:	45 91       	lpm	r20, Z+
 334:	54 91       	lpm	r21, Z
				list += 2;
 336:	fc 01       	movw	r30, r24
 338:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 33a:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 33c:	2f 3f       	cpi	r18, 0xFF	; 255
 33e:	31 05       	cpc	r19, r1
 340:	19 f0       	breq	.+6      	; 0x348 <__vector_11+0xc0>
 342:	10 f0       	brcs	.+4      	; 0x348 <__vector_11+0xc0>
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	28 17       	cp	r18, r24
 34a:	08 f4       	brcc	.+2      	; 0x34e <__vector_11+0xc6>
 34c:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 34e:	3e ef       	ldi	r19, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 350:	90 91 e8 00 	lds	r25, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 354:	29 2f       	mov	r18, r25
 356:	25 70       	andi	r18, 0x05	; 5
 358:	d9 f3       	breq	.-10     	; 0x350 <__vector_11+0xc8>
				if (i & (1<<RXOUTI)) return;	// abort
 35a:	92 fd       	sbrc	r25, 2
 35c:	ba c0       	rjmp	.+372    	; 0x4d2 <__vector_11+0x24a>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 35e:	98 2f       	mov	r25, r24
 360:	81 32       	cpi	r24, 0x21	; 33
 362:	08 f0       	brcs	.+2      	; 0x366 <__vector_11+0xde>
 364:	90 e2       	ldi	r25, 0x20	; 32
				for (i = n; i; i--) {
 366:	fa 01       	movw	r30, r20
 368:	29 2f       	mov	r18, r25
 36a:	22 23       	and	r18, r18
 36c:	31 f0       	breq	.+12     	; 0x37a <__vector_11+0xf2>
					UEDATX = pgm_read_byte(desc_addr++);
 36e:	64 91       	lpm	r22, Z
 370:	60 93 f1 00 	sts	0x00F1, r22
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 374:	21 50       	subi	r18, 0x01	; 1
 376:	31 96       	adiw	r30, 0x01	; 1
 378:	f8 cf       	rjmp	.-16     	; 0x36a <__vector_11+0xe2>
 37a:	49 0f       	add	r20, r25
 37c:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 37e:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 380:	30 93 e8 00 	sts	0x00E8, r19
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 384:	81 11       	cpse	r24, r1
 386:	e4 cf       	rjmp	.-56     	; 0x350 <__vector_11+0xc8>
 388:	90 32       	cpi	r25, 0x20	; 32
 38a:	11 f3       	breq	.-60     	; 0x350 <__vector_11+0xc8>
 38c:	a2 c0       	rjmp	.+324    	; 0x4d2 <__vector_11+0x24a>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 38e:	85 30       	cpi	r24, 0x05	; 5
 390:	41 f4       	brne	.+16     	; 0x3a2 <__vector_11+0x11a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 392:	8e ef       	ldi	r24, 0xFE	; 254
 394:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 398:	1c df       	rcall	.-456    	; 0x1d2 <usb_wait_in_ready>
 39a:	00 68       	ori	r16, 0x80	; 128
			UDADDR = wValue | (1<<ADDEN);
 39c:	00 93 e3 00 	sts	0x00E3, r16
 3a0:	98 c0       	rjmp	.+304    	; 0x4d2 <__vector_11+0x24a>
			return;
 3a2:	89 30       	cpi	r24, 0x09	; 9
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 3a4:	41 f5       	brne	.+80     	; 0x3f6 <__vector_11+0x16e>
 3a6:	91 11       	cpse	r25, r1
 3a8:	4b c0       	rjmp	.+150    	; 0x440 <__vector_11+0x1b8>
 3aa:	00 93 02 01 	sts	0x0102, r16
			usb_configuration = wValue;
 3ae:	8e ef       	ldi	r24, 0xFE	; 254
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 3b0:	80 93 e8 00 	sts	0x00E8, r24
 3b4:	41 e0       	ldi	r20, 0x01	; 1
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 3b6:	8e e4       	ldi	r24, 0x4E	; 78
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	40 93 e9 00 	sts	0x00E9, r20
			for (i=1; i<5; i++) {
				UENUM = i;
 3be:	9c 01       	movw	r18, r24
				en = pgm_read_byte(cfg++);
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
 3c4:	fc 01       	movw	r30, r24
 3c6:	54 91       	lpm	r21, Z
 3c8:	50 93 eb 00 	sts	0x00EB, r21
				UECONX = en;
 3cc:	55 23       	and	r21, r21
				if (en) {
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <__vector_11+0x160>
 3d0:	f9 01       	movw	r30, r18
					UECFG0X = pgm_read_byte(cfg++);
 3d2:	24 91       	lpm	r18, Z
 3d4:	20 93 ec 00 	sts	0x00EC, r18
 3d8:	9c 01       	movw	r18, r24
					UECFG1X = pgm_read_byte(cfg++);
 3da:	2d 5f       	subi	r18, 0xFD	; 253
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	fc 01       	movw	r30, r24
 3e0:	32 96       	adiw	r30, 0x02	; 2
 3e2:	84 91       	lpm	r24, Z
 3e4:	80 93 ed 00 	sts	0x00ED, r24
 3e8:	4f 5f       	subi	r20, 0xFF	; 255
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 3ea:	45 30       	cpi	r20, 0x05	; 5
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <__vector_11+0x16a>
 3ee:	c9 01       	movw	r24, r18
 3f0:	e4 cf       	rjmp	.-56     	; 0x3ba <__vector_11+0x132>
 3f2:	8e e1       	ldi	r24, 0x1E	; 30
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 3f4:	45 c0       	rjmp	.+138    	; 0x480 <__vector_11+0x1f8>
 3f6:	88 30       	cpi	r24, 0x08	; 8
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3f8:	49 f4       	brne	.+18     	; 0x40c <__vector_11+0x184>
 3fa:	90 38       	cpi	r25, 0x80	; 128
 3fc:	09 f0       	breq	.+2      	; 0x400 <__vector_11+0x178>
 3fe:	66 c0       	rjmp	.+204    	; 0x4cc <__vector_11+0x244>
 400:	e8 de       	rcall	.-560    	; 0x1d2 <usb_wait_in_ready>
			usb_wait_in_ready();
 402:	80 91 02 01 	lds	r24, 0x0102
			UEDATX = usb_configuration;
 406:	80 93 f1 00 	sts	0x00F1, r24
 40a:	16 c0       	rjmp	.+44     	; 0x438 <__vector_11+0x1b0>
 40c:	81 11       	cpse	r24, r1
 40e:	18 c0       	rjmp	.+48     	; 0x440 <__vector_11+0x1b8>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 410:	99 83       	std	Y+1, r25	; 0x01
 412:	df de       	rcall	.-578    	; 0x1d2 <usb_wait_in_ready>
			usb_wait_in_ready();
 414:	99 81       	ldd	r25, Y+1	; 0x01
 416:	92 38       	cpi	r25, 0x82	; 130
 418:	51 f4       	brne	.+20     	; 0x42e <__vector_11+0x1a6>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 41a:	e0 92 e9 00 	sts	0x00E9, r14
 41e:	80 91 eb 00 	lds	r24, 0x00EB
				UENUM = wIndex;
 422:	85 fb       	bst	r24, 5
				if (UECONX & (1<<STALLRQ)) i = 1;
 424:	88 27       	eor	r24, r24
 426:	80 f9       	bld	r24, 0
 428:	10 92 e9 00 	sts	0x00E9, r1
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__vector_11+0x1a8>
				UENUM = 0;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 434:	10 92 f1 00 	sts	0x00F1, r1
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 438:	8e ef       	ldi	r24, 0xFE	; 254
			UEDATX = 0;
 43a:	80 93 e8 00 	sts	0x00E8, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 43e:	49 c0       	rjmp	.+146    	; 0x4d2 <__vector_11+0x24a>
 440:	48 2f       	mov	r20, r24
 442:	4d 7f       	andi	r20, 0xFD	; 253
 444:	41 30       	cpi	r20, 0x01	; 1
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 446:	09 f0       	breq	.+2      	; 0x44a <__vector_11+0x1c2>
 448:	41 c0       	rjmp	.+130    	; 0x4cc <__vector_11+0x244>
 44a:	92 30       	cpi	r25, 0x02	; 2
 44c:	f1 f4       	brne	.+60     	; 0x48a <__vector_11+0x202>
 44e:	01 2b       	or	r16, r17
		  && bmRequestType == 0x02 && wValue == 0) {
 450:	e9 f5       	brne	.+122    	; 0x4cc <__vector_11+0x244>
 452:	2e 2d       	mov	r18, r14
 454:	2f 77       	andi	r18, 0x7F	; 127
 456:	9f ef       	ldi	r25, 0xFF	; 255
			i = wIndex & 0x7F;
 458:	92 0f       	add	r25, r18
 45a:	94 30       	cpi	r25, 0x04	; 4
			if (i >= 1 && i <= MAX_ENDPOINT) {
 45c:	b8 f5       	brcc	.+110    	; 0x4cc <__vector_11+0x244>
 45e:	9e ef       	ldi	r25, 0xFE	; 254
 460:	90 93 e8 00 	sts	0x00E8, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 464:	20 93 e9 00 	sts	0x00E9, r18
 468:	83 30       	cpi	r24, 0x03	; 3
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 46a:	81 f1       	breq	.+96     	; 0x4cc <__vector_11+0x244>
 46c:	89 e1       	ldi	r24, 0x19	; 25
				if (bRequest == SET_FEATURE) {
 46e:	80 93 eb 00 	sts	0x00EB, r24
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
					UERST = (1 << i);
 478:	01 c0       	rjmp	.+2      	; 0x47c <__vector_11+0x1f4>
 47a:	88 0f       	add	r24, r24
 47c:	0a 94       	dec	r0
 47e:	ea f7       	brpl	.-6      	; 0x47a <__vector_11+0x1f2>
 480:	80 93 ea 00 	sts	0x00EA, r24
 484:	10 92 ea 00 	sts	0x00EA, r1
 488:	24 c0       	rjmp	.+72     	; 0x4d2 <__vector_11+0x24a>
					UERST = 0;
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	f9 f4       	brne	.+62     	; 0x4cc <__vector_11+0x244>
 48e:	91 3a       	cpi	r25, 0xA1	; 161
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 490:	e9 f4       	brne	.+58     	; 0x4cc <__vector_11+0x244>
 492:	ef 28       	or	r14, r15
 494:	d9 f4       	brne	.+54     	; 0x4cc <__vector_11+0x244>
 496:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
 498:	80 91 e8 00 	lds	r24, 0x00E8
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 49c:	98 2f       	mov	r25, r24
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 49e:	95 70       	andi	r25, 0x05	; 5
 4a0:	d9 f3       	breq	.-10     	; 0x498 <__vector_11+0x210>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 4a2:	82 fd       	sbrc	r24, 2
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <__vector_11+0x24a>
 4a6:	82 2f       	mov	r24, r18
					if (i & (1<<RXOUTI)) return;	// abort
 4a8:	21 32       	cpi	r18, 0x21	; 33
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <__vector_11+0x226>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	98 2f       	mov	r25, r24
 4b0:	99 23       	and	r25, r25
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__vector_11+0x234>
					for (i = n; i; i--) {
 4b4:	10 92 f1 00 	sts	0x00F1, r1
 4b8:	91 50       	subi	r25, 0x01	; 1
						UEDATX = 0;
 4ba:	fa cf       	rjmp	.-12     	; 0x4b0 <__vector_11+0x228>
 4bc:	28 1b       	sub	r18, r24
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 4be:	30 93 e8 00 	sts	0x00E8, r19
						UEDATX = 0;
					}
					len -= n;
 4c2:	21 11       	cpse	r18, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4c4:	e9 cf       	rjmp	.-46     	; 0x498 <__vector_11+0x210>
 4c6:	80 32       	cpi	r24, 0x20	; 32
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 4c8:	39 f3       	breq	.-50     	; 0x498 <__vector_11+0x210>
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__vector_11+0x24a>
 4cc:	81 e2       	ldi	r24, 0x21	; 33
 4ce:	80 93 eb 00 	sts	0x00EB, r24
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 4d2:	0f 90       	pop	r0
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	0f 90       	pop	r0
 4fa:	0b be       	out	0x3b, r0	; 59
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
